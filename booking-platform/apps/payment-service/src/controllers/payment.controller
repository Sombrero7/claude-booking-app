import { Request, Response } from 'express';
import { 
  TransactionModel, 
  BookingModel, 
  UserModel,
  RequestModel
} from '@booking-platform/database';
import { successResponse, errorResponse, calculatePlatformFee } from '@booking-platform/utils';
import * as stripeService from '../services/stripe.service';
import axios from 'axios';
import admin from 'firebase-admin';

// Initialize Firebase Admin SDK
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL
    })
  });
}

export interface AuthRequest extends Request {
  user?: admin.auth.DecodedIdToken;
}

/**
 * Initiate a payment
 */
export const initiatePayment = async (req: Request, res: Response): Promise<void> => {
  try {
    const { 
      bookingId, 
      requestId,
      amount, 
      currency, 
      description, 
      metadata
    } = req.body;

    if ((!bookingId && !requestId) || !amount || !currency) {
      res.status(400).json(errorResponse('Missing required fields', 'MISSING_FIELDS'));
      return;
    }

    // Determine transaction type and get details
    let userId: string;
    let entityId: string;
    let transactionType: 'booking' | 'request';

    if (bookingId) {
      const booking = await BookingModel.findById(bookingId);
      if (!booking) {
        res.status(404).json(errorResponse('Booking not found', 'BOOKING_NOT_FOUND'));
        return;
      }
      userId = booking.userId;
      entityId = booking.eventId;
      transactionType = 'booking';
    } else {
      const request = await RequestModel.findById(requestId);
      if (!request) {
        res.status(404).json(errorResponse('Request not found', 'REQUEST_NOT_FOUND'));
        return;
      }
      userId = request.userId;
      entityId = request._id;
      transactionType = 'request';
    }

    // Get or create Stripe customer
    const user = await UserModel.findOne({ firebaseId: userId });
    if (!user) {
      res.status(404).json(errorResponse('User not found', 'USER_NOT_FOUND'));
      return;
    }

    let customerId = user.stripe?.customerId;
    
    if (!customerId) {
      customerId = await stripeService.createStripeCustomer(
        user.firebaseId,
        user.email,
        user.profile.name
      );
      
      // Update user with Stripe customer ID
      user.stripe = {
        ...user.stripe,
        customerId
      };
      await user.save();
    }

    // Calculate platform fee
    const platformFee = calculatePlatformFee(amount);
    const totalAmount = amount + platformFee;

    // Create new transaction record
    const transaction = new TransactionModel({
      bookingId: bookingId || undefined,
      requestId: requestId || undefined,
      transactionType,
      amount: totalAmount,
      currency: currency.toUpperCase(),
      paymentMethod: 'stripe',
      platformFee,
      status: 'pending'
    });

    await transaction.save();

    // Create Stripe payment intent
    const paymentIntent = await stripeService.createPaymentIntent(
      totalAmount,
      currency,
      customerId,
      {
        ...metadata,
        transactionId: transaction._id.toString()
      }
    );

    // Update transaction with payment intent ID
    transaction.stripePaymentIntentId = paymentIntent.id;
    await transaction.save();

    // If it's a booking, update booking with payment ID
    if (bookingId) {
      await BookingModel.findByIdAndUpdate(bookingId, {
        paymentId: transaction._id
      });
    } else if (requestId) {
      await RequestModel.findByIdAndUpdate(requestId, {
        paymentId: transaction._id
      });
    }

    res.status(200).json(successResponse({
      paymentId: transaction._id,
      clientSecret: paymentIntent.client_secret,
      amount: totalAmount,
      currency: currency.toUpperCase()
    }));
  } catch (error: any) {
    console.error('Initiate payment error:', error);
    res.status(500).json(errorResponse(error.message, 'PAYMENT_INITIATE_ERROR'));
  }
};

/**
 * Process a payment confirmation
 */
export const confirmPayment = async (req: Request, res: Response): Promise<void> => {
  try {
    const { paymentIntentId } = req.body;

    if (!paymentIntentId) {
      res.status(400).json(errorResponse('Missing payment intent ID', 'MISSING_PAYMENT_INTENT_ID'));
      return;
    }

    // Find transaction by payment intent ID
    const transaction = await TransactionModel.findOne({ stripePaymentIntentId: paymentIntentId });
    if (!transaction) {
      res.status(404).json(errorResponse('Transaction not found', 'TRANSACTION_NOT_FOUND'));
      return;
    }

    // Update transaction status
    transaction.status = 'completed';
    await transaction.save();

    // Update the related booking or request
    if (transaction.bookingId) {
      await BookingModel.findByIdAndUpdate(transaction.bookingId, {
        paymentStatus: 'paid',
        status: 'confirmed'
      });
    } else if (transaction.requestId) {
      await RequestModel.findByIdAndUpdate(transaction.requestId, {
        paymentStatus: 'paid'
      });
    }

    res.status(200).json(successResponse({ message: 'Payment confirmed successfully' }));
  } catch (error: any) {
    console.error('Confirm payment error:', error);
    res.status(500).json(errorResponse(error.message, 'PAYMENT_CONFIRM_ERROR'));
  }
};

/**
 * Process a refund
 */
export const processRefund = async (req: Request, res: Response): Promise<void> => {
  try {
    const { bookingId, requestId } = req.body;

    if (!bookingId && !requestId) {
      res.status(400).json(errorResponse('Missing booking or request ID', 'MISSING_ID'));
      return;
    }

    // Find transaction
    const transaction = await TransactionModel.findOne({
      $or: [
        { bookingId },
        { requestId }
      ]
    });

    if (!transaction) {
      res.status(404).json(errorResponse('Transaction not found', 'TRANSACTION_NOT_FOUND'));
      return;
    }

    if (transaction.status !== 'completed') {
      res.status(400).json(errorResponse('Transaction not completed', 'TRANSACTION_NOT_COMPLETED'));
      return;
    }

    if (!transaction.stripePaymentIntentId) {
      res.status(400).json(errorResponse('No payment intent found', 'NO_PAYMENT_INTENT'));
      return;
    }

    // Process refund via Stripe
    const refund = await stripeService.processRefund(transaction.stripePaymentIntentId);

    // Update transaction status
    transaction.status = 'refunded';
    transaction.refundId = refund.id;
    await transaction.save();

    // Update the related booking or request
    if (transaction.bookingId) {
      await BookingModel.findByIdAndUpdate(transaction.bookingId, {
        paymentStatus: 'unpaid',
        status: 'cancelled'
      });
    } else if (transaction.requestId) {
      await RequestModel.findByIdAndUpdate(transaction.requestId, {
        paymentStatus: 'unpaid',
        status: 'rejected'
      });
    }

    res.status(200).json(successResponse({ 
      message: 'Refund processed successfully',
      refundId: refund.id
    }));
  } catch (error: any) {
    console.error('Process refund error:', error);
    res.status(500).json(errorResponse(error.message, 'REFUND_PROCESS_ERROR'));
  }
};

/**
 * Get transaction history for a user
 */
export const getUserTransactions = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    // Get all bookings and requests for this user
    const bookings = await BookingModel.find({ userId: req.user.uid });
    const requests = await RequestModel.find({ userId: req.user.uid });

    const bookingIds = bookings.map(booking => booking._id);
    const requestIds = requests.map(request => request._id);

    // Find all transactions related to these bookings and requests
    const transactions = await TransactionModel.find({
      $or: [
        { bookingId: { $in: bookingIds } },
        { requestId: { $in: requestIds } }
      ]
    }).sort({ createdAt: -1 });

    res.status(200).json(successResponse(transactions));
  } catch (error: any) {
    console.error('Get user transactions error:', error);
    res.status(500).json(errorResponse(error.message, 'TRANSACTIONS_FETCH_ERROR'));
  }
};

/**
 * Set up Stripe Connected Account for creators
 */
export const setupStripeAccount = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const { returnUrl, refreshUrl } = req.body;

    if (!returnUrl || !refreshUrl) {
      res.status(400).json(errorResponse('Missing URLs', 'MISSING_URLS'));
      return;
    }

    // Get user
    const user = await UserModel.findOne({ firebaseId: req.user.uid });
    if (!user) {
      res.status(404).json(errorResponse('User not found', 'USER_NOT_FOUND'));
      return;
    }

    // Check if user is a provider
    if (user.role !== 'provider' && user.role !== 'admin') {
      res.status(403).json(errorResponse('Only providers can set up Stripe accounts', 'PROVIDER_ROLE_REQUIRED'));
      return;
    }

    // Check if user already has a Stripe account
    if (user.stripe?.accountId) {
      // Get account details to check if onboarding is complete
      // This would require additional Stripe API calls in a real implementation
      
      res.status(409).json(errorResponse('Stripe account already exists', 'ACCOUNT_EXISTS'));
      return;
    }

    // Create Stripe connected account
    const accountId = await stripeService.createStripeConnectedAccount(user.firebaseId, user.email);
    
    // Update user with Stripe account ID
    user.stripe = {
      ...user.stripe,
      accountId
    };
    await user.save();

    // Create account link for onboarding
    const accountLinkUrl = await stripeService.createAccountLink(accountId, refreshUrl, returnUrl);

    res.status(200).json(successResponse({
      accountId,
      accountLinkUrl
    }));
  } catch (error: any) {
    console.error('Setup Stripe account error:', error);
    res.status(500).json(errorResponse(error.message, 'STRIPE_SETUP_ERROR'));
  }
};