import { Request, Response } from 'express';
import { RequestModel, UserModel, SpaceModel } from '@booking-platform/database';
import { successResponse, errorResponse, calculatePlatformFee } from '@booking-platform/utils';
import admin from 'firebase-admin';

export interface AuthRequest extends Request {
  user?: admin.auth.DecodedIdToken;
}

/**
 * Create a new custom event request
 */
export const createRequest = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const {
      creatorId,
      spaceId,
      title,
      description,
      desiredDateTime,
      attendeesCount,
      specialRequirements
    } = req.body;

    // Validate required fields
    if (!creatorId || !spaceId || !title || !description || !desiredDateTime) {
      res.status(400).json(errorResponse('Missing required fields', 'MISSING_FIELDS'));
      return;
    }

    // Validate creator and space exist
    const creator = await UserModel.findOne({ firebaseId: creatorId });
    if (!creator) {
      res.status(404).json(errorResponse('Creator not found', 'CREATOR_NOT_FOUND'));
      return;
    }

    const space = await SpaceModel.findById(spaceId);
    if (!space) {
      res.status(404).json(errorResponse('Space not found', 'SPACE_NOT_FOUND'));
      return;
    }

    // Check if space is available on that date/time
    // This would be a more complex check in a real application

    // Calculate estimated price
    const venueFee = space.pricing.hourlyRate * 
                    ((new Date(desiredDateTime.end).getTime() - new Date(desiredDateTime.start).getTime()) / 3600000);
    const creatorFee = 100; // This would be determined by creator's rates
    const platformFee = calculatePlatformFee(venueFee + creatorFee);
    const totalCost = venueFee + creatorFee + platformFee;

    // Create new request
    const newRequest = new RequestModel({
      userId: req.user.uid,
      creatorId,
      spaceId,
      title,
      description,
      desiredDateTime,
      attendeesCount: attendeesCount || 1,
      status: 'pending',
      venueApproval: 'pending',
      creatorApproval: 'pending',
      priceBreakdown: {
        venueFee,
        creatorFee,
        platformFee,
        totalCost
      },
      paymentStatus: 'unpaid',
      specialRequirements
    });

    await newRequest.save();

    // Notify creator and venue owner
    // In a real app, you would trigger notifications here

    res.status(201).json(successResponse(newRequest));
  } catch (error: any) {
    console.error('Create request error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUEST_CREATE_ERROR'));
  }
};

/**
 * Get request by ID
 */
export const getRequestById = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const { id } = req.params;
    const request = await RequestModel.findById(id);

    if (!request) {
      res.status(404).json(errorResponse('Request not found', 'REQUEST_NOT_FOUND'));
      return;
    }

    // Check if user is authorized to view this request
    // Either the requester, the creator, or the venue owner can view
    const space = await SpaceModel.findById(request.spaceId);

    if (request.userId !== req.user.uid && 
        request.creatorId !== req.user.uid && 
        space?.ownerId !== req.user.uid) {
      res.status(403).json(errorResponse('Not authorized to view this request', 'NOT_AUTHORIZED'));
      return;
    }

    res.status(200).json(successResponse(request));
  } catch (error: any) {
    console.error('Get request error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUEST_FETCH_ERROR'));
  }
};

/**
 * Update request approval status (for creator or venue)
 */
export const updateRequestApproval = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const { id } = req.params;
    const { approval, price } = req.body;

    if (!approval || !['accepted', 'rejected'].includes(approval)) {
      res.status(400).json(errorResponse('Invalid approval status', 'INVALID_APPROVAL'));
      return;
    }

    const request = await RequestModel.findById(id);

    if (!request) {
      res.status(404).json(errorResponse('Request not found', 'REQUEST_NOT_FOUND'));
      return;
    }

    // Determine if user is creator or venue owner
    const space = await SpaceModel.findById(request.spaceId);
    const isCreator = request.creatorId === req.user.uid;
    const isVenueOwner = space?.ownerId === req.user.uid;

    if (!isCreator && !isVenueOwner) {
      res.status(403).json(errorResponse('Not authorized to update this request', 'NOT_AUTHORIZED'));
      return;
    }

    // Update appropriate approval field
    if (isCreator) {
      request.creatorApproval = approval;
      
      // Update creator fee if provided
      if (price && approval === 'accepted') {
        request.priceBreakdown.creatorFee = price;
        request.priceBreakdown.totalCost = 
          request.priceBreakdown.venueFee + 
          price + 
          request.priceBreakdown.platformFee;
      }
    } else if (isVenueOwner) {
      request.venueApproval = approval;
      
      // Update venue fee if provided
      if (price && approval === 'accepted') {
        request.priceBreakdown.venueFee = price;
        request.priceBreakdown.totalCost = 
          price + 
          request.priceBreakdown.creatorFee + 
          request.priceBreakdown.platformFee;
      }
    }

    // Update overall status if both parties have responded
    if (request.creatorApproval !== 'pending' && request.venueApproval !== 'pending') {
      request.status = (request.creatorApproval === 'accepted' && request.venueApproval === 'accepted')
        ? 'accepted'
        : 'rejected';
    }

    await request.save();

    // If both accepted, initiate payment flow
    if (request.status === 'accepted') {
      // In a real app, initiate payment here
    }

    res.status(200).json(successResponse(request));
  } catch (error: any) {
    console.error('Update request approval error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUEST_UPDATE_ERROR'));
  }
};

/**
 * List user's requests
 */
export const getUserRequests = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const { status, page = 1, limit = 10 } = req.query;

    // Build query
    const query: any = { userId: req.user.uid };

    if (status) {
      query.status = status;
    }

    // Calculate pagination
    const skip = (Number(page) - 1) * Number(limit);

    // Execute query
    const requests = await RequestModel.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit));

    // Get total count for pagination
    const total = await RequestModel.countDocuments(query);

    res.status(200).json(successResponse({
      requests,
      pagination: {
        total,
        page: Number(page),
        limit: Number(limit),
        pages: Math.ceil(total / Number(limit))
      }
    }));
  } catch (error: any) {
    console.error('Get user requests error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUESTS_FETCH_ERROR'));
  }
};

/**
 * List pending requests for creator
 */
export const getCreatorRequests = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    const { status, page = 1, limit = 10 } = req.query;

    // Build query
    const query: any = { creatorId: req.user.uid };

    if (status) {
      query.status = status;
    }

    // Calculate pagination
    const skip = (Number(page) - 1) * Number(limit);

    // Execute query
    const requests = await RequestModel.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit));

    // Get total count for pagination
    const total = await RequestModel.countDocuments(query);

    res.status(200).json(successResponse({
      requests,
      pagination: {
        total,
        page: Number(page),
        limit: Number(limit),
        pages: Math.ceil(total / Number(limit))
      }
    }));
  } catch (error: any) {
    console.error('Get creator requests error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUESTS_FETCH_ERROR'));
  }
};

/**
 * List pending requests for venue
 */
export const getVenueRequests = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json(errorResponse('User not authenticated', 'AUTH_REQUIRED'));
      return;
    }

    // First get all spaces owned by the user
    const spaces = await SpaceModel.find({ ownerId: req.user.uid });
    
    if (!spaces.length) {
      res.status(200).json(successResponse({
        requests: [],
        pagination: {
          total: 0,
          page: 1,
          limit: 10,
          pages: 0
        }
      }));
      return;
    }

    const spaceIds = spaces.map(space => space._id);
    const { status, page = 1, limit = 10 } = req.query;

    // Build query for requests
    const query: any = { spaceId: { $in: spaceIds } };

    if (status) {
      query.status = status;
    }

    // Calculate pagination
    const skip = (Number(page) - 1) * Number(limit);

    // Execute query
    const requests = await RequestModel.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit));

    // Get total count for pagination
    const total = await RequestModel.countDocuments(query);

    res.status(200).json(successResponse({
      requests,
      pagination: {
        total,
        page: Number(page),
        limit: Number(limit),
        pages: Math.ceil(total / Number(limit))
      }
    }));
  } catch (error: any) {
    console.error('Get venue requests error:', error);
    res.status(500).json(errorResponse(error.message, 'REQUESTS_FETCH_ERROR'));
  }
};